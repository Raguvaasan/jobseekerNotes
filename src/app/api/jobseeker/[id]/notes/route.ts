import { NextRequest, NextResponse } from 'next/server';

interface Note {
  id: number;
  jobseeker_id: number;
  note: string;
  created_by: string;
  created_by_name: string;
  created_at: string;
}

interface User {
  id: number;
  name: string;
  role: string;
}

// Mock data - in production, this would come from your database
const initialNotes: Note[] = [
  {
    id: 1,
    jobseeker_id: 1,
    note: 'Initial interview completed. Candidate shows strong technical skills in React and Node.js. Good communication skills and team fit. Looking forward to the next round of interviews.',
    created_by: '1',
    created_by_name: 'John Recruiter',
    created_at: '2024-08-01T10:30:00Z'
  },
  {
    id: 2,
    jobseeker_id: 1,
    note: 'Second round technical assessment scheduled for next week. Focus on system design and problem-solving abilities. Candidate has shown excellent preparation and enthusiasm.',
    created_by: '2',
    created_by_name: 'Jane Manager',
    created_at: '2024-08-03T14:15:00Z'
  },
  {
    id: 3,
    jobseeker_id: 1,
    note: 'Final interview completed successfully. All team members provided positive feedback. Candidate demonstrated excellent problem-solving skills and cultural fit. Proceeding with reference checks.',
    created_by: '1',
    created_by_name: 'John Recruiter',
    created_at: '2024-08-05T09:45:00Z'
  }
];

// Global mutable state for demo (in production, use database)
// eslint-disable-next-line prefer-const
let mockNotes: Note[] = [...initialNotes];
// eslint-disable-next-line prefer-const, @typescript-eslint/no-unused-vars
let nextId = 4;

const mockUser: User = {
  id: 1,
  name: 'John Recruiter',
  role: 'Recruitment Executive'
};
 

// GET - Fetch all notes for a jobseeker
export async function GET(
  request: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  try {
    const params = await context.params;
    const jobseekerId = parseInt(params.id);
    
    // Filter notes by jobseeker ID
    const notes = mockNotes
      .filter(note => note.jobseeker_id === jobseekerId)
      .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());

    return NextResponse.json({
      success: true,
      data: notes
    });
  } catch (error) {
    console.error('Error fetching notes:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to fetch notes' },
      { status: 500 }
    );
  }
}

// POST - Add new note for a jobseeker
export async function POST(
  request: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  try {
    const params = await context.params;
    const jobseekerId = parseInt(params.id);
    const body = await request.json();
    const { note } = body;

    // Validation
    if (!note || note.trim().length < 20) {
      return NextResponse.json(
        { success: false, error: 'Note must be at least 20 characters long' },
        { status: 400 }
      );
    }

    // Create new note
    const newNote = {
      id: Date.now(), // In real app, this would be auto-generated by database
      jobseeker_id: jobseekerId,
      note: note.trim(),
      created_by: mockUser.id.toString(),
      created_by_name: mockUser.name,
      created_at: new Date().toISOString()
    };

    // Add to mock database
    mockNotes.push(newNote);

    return NextResponse.json({
      success: true,
      message: 'Note added successfully',
      data: newNote
    }, { status: 201 });

  } catch (error) {
    console.error('Error adding note:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to add note' },
      { status: 500 }
    );
  }
}

// PUT - Update existing note
export async function PUT(
  request: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  try {
    const params = await context.params;
    const jobseekerId = parseInt(params.id);
    const body = await request.json();
    const { noteId, note } = body;

    // Validation
    if (!note || note.trim().length < 20) {
      return NextResponse.json(
        { success: false, error: 'Note must be at least 20 characters long' },
        { status: 400 }
      );
    }

    // Find and update note
    const noteIndex = mockNotes.findIndex(
      n => n.id === noteId && n.jobseeker_id === jobseekerId
    );

    if (noteIndex === -1) {
      return NextResponse.json(
        { success: false, error: 'Note not found' },
        { status: 404 }
      );
    }

    mockNotes[noteIndex].note = note.trim();
    
    return NextResponse.json({
      success: true,
      message: 'Note updated successfully',
      data: mockNotes[noteIndex]
    });

  } catch (error) {
    console.error('Error updating note:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to update note' },
      { status: 500 }
    );
  }
}

// DELETE - Delete note
export async function DELETE(
  request: NextRequest,
  context: { params: Promise<{ id: string }> }
) {
  try {
    const params = await context.params;
    const url = new URL(request.url);
    const noteId = parseInt(url.searchParams.get('noteId') || '');
    const jobseekerId = parseInt(params.id);

    if (isNaN(noteId) || isNaN(jobseekerId)) {
      return NextResponse.json(
        { success: false, error: 'Invalid note ID or jobseeker ID' },
        { status: 400 }
      );
    }

    const noteIndex = mockNotes.findIndex(
      (n: Note) => n.id === noteId && n.jobseeker_id === jobseekerId
    );

    if (noteIndex === -1) {
      return NextResponse.json(
        { success: false, error: 'Note not found' },
        { status: 404 }
      );
    }

    mockNotes.splice(noteIndex, 1);

    return NextResponse.json({
      success: true,
      message: 'Note deleted successfully'
    });
  } catch (error) {
    console.error('Error deleting note:', error);
    return NextResponse.json(
      { success: false, error: 'Failed to delete note' },
      { status: 500 }
    );
  }
}
